import {createSlice} from '@reduxjs/toolkit';
import { message } from 'antd';

const initialState = {
  carts: [],
};

/**
 * carts = [
 *  {quantity:1 , _id:'idBook', detail: {_id : 'idBook' , name : 'nameBook'}  },
 * ]
 */

export const orderSlice = createSlice({
  name: 'order',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    doAddBookAction: (state, action) => {
      let carts = state.carts;
      const item = action.payload;

      let isExistIndex = carts.findIndex((cart) => cart._id === item._id);
      if (isExistIndex > -1) {
        carts[isExistIndex].quantity = carts[isExistIndex].quantity + item.quantity;

        if (carts[isExistIndex].quantity > carts[isExistIndex].detail.quantity) {
          carts[isExistIndex].quantity = carts[isExistIndex].detail.quantity;
        }
      } else {
        carts.push({quantity: item.quantity, _id: item._id, detail: item.detail});
      }
      state.carts = carts;
      message.success('Đã thêm vào giỏ hàng')
    },

    doUpdateCartAction: (state, action) => {
      let carts = state.carts
      const item = action.payload

      let isExistIndex = carts.findIndex((cart) => cart._id === item._id);
      if (isExistIndex > -1){
        carts[isExistIndex].quantity = item.quantity

        if (carts[isExistIndex].quantity > carts[isExistIndex].detail.quantity) {
          carts[isExistIndex].quantity = carts[isExistIndex].detail.quantity;
        }
      }else{
        carts.push({quantity: item.quantity, _id: item._id, detail: item.detail});
      }
      state.carts = carts;
    },

    doDeleteItemCartAction:(state, action)=>{
      state.carts = state.carts.filter(c => c._id !== action.payload._id)
    },
    doPlaceOrderAction:(state, action)=>{
      state.carts = []

    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {},
});

export const {doAddBookAction, doUpdateCartAction,doDeleteItemCartAction,doPlaceOrderAction} = orderSlice.actions;

export default orderSlice.reducer;
